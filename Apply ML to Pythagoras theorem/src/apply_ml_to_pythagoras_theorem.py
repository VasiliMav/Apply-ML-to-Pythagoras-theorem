# -*- coding: utf-8 -*-
"""Apply ML to Pythagoras theorem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14XlrC0pJpsU0QnwCgW4jZrT-xfXWXs-n

#IMPORT LIBRARIES
"""

import numpy as np  # Library for math operations & generating data
import pandas as pd # Library for DataFrame & storing data

"""#GENERATE SAMPLES - PARAMETERS"""

# Generate 1000 samples of leg lengths (a, b)
NUM_SAMPLES = 1000 # Total number of synthetic triangles
A = np.random.uniform(1, 100, NUM_SAMPLES)  # Random A
B = np.random.uniform(1, 100, NUM_SAMPLES)  # Random B

"""#PYTHAGORAS THEOREM"""

# Compute hypotenuse using Pythagoras' theorem
C = np.sqrt(A**2 + B**2)  # Pythagorean theorem

"""#CREATE DATA

"""

# Create a DataFrame
DATA = pd.DataFrame({'a': A, 'b': B, 'c': C})  # DATAFrame with A, B, C

"""#SAVE DATA"""

DATA.to_csv("DATAset.csv", index=False)  # Save data to CSV

"""#ML LIBRARIES - MODEL"""

from sklearn.model_selection import train_test_split  # Splitting data
from sklearn.linear_model import LinearRegression      # ML model
from sklearn.metrics import mean_squared_error, r2_score  # Evaluation

"""#SPLIT DATA INTO TRAIN & TEST"""

# Split data
X = DATA[['a', 'b']]  # Features
Y = DATA['c']         # Target
X_TRAIN, X_TEST, Y_TRAIN, Y_TEST = train_test_split(X, Y, test_size=0.2, random_state=42)

"""#TRAIN MODEL"""

# Train model
MODEL = LinearRegression()
MODEL.fit(X_TRAIN, Y_TRAIN)  # FIT model to training data

"""#PREDICT ON TEST DATA"""

Y_PRED = MODEL.predict(X_TEST)  # Predict hypotenuse from A & B

"""#EVALUATE"""

# Evaluation metrics
MSE = mean_squared_error(Y_TEST, Y_PRED)  # Mean squared error
R2 = r2_score(Y_TEST, Y_PRED)             # R² score

print(f"Mean Squared Error: {MSE:.4f}")
print(f"R² Score: {R2:.4f}")

"""#VISUALIZE DATA"""

import matplotlib.pyplot as plt

plt.scatter(Y_TEST, Y_PRED, alpha=0.5)  # For Visualization
plt.xlabel("True Hypotenuse")
plt.ylabel("Predicted Hypotenuse")
plt.title("Prediction vs True Values")
plt.grid(True)
plt.show()

"""#USER INPUT AND NEW PREDICTIONS"""

# Ask the user for new inputs (lengths of triangle legs)

NEW_A = float(input("Enter length of side a: "))  # Input for A
NEW_B = float(input("Enter length of side b: "))  # Input for B

# Predict the hypotenuse using the trained model
NEW_PRED = MODEL.predict([[NEW_A, NEW_B]])[0]  # Model prediction

# Ground truth using actual Pythagorean theorem
TRUE_C = np.sqrt(NEW_A**2 + NEW_B**2)

print(f"Predicted Hypotenuse: {NEW_PRED:.4f}")
print(f"True Hypotenuse (Pythagorean): {TRUE_C:.4f}")

"""VISUALIZE THE PREDICTION"""

# Visualize the prediction

plt.figure()
plt.bar(['Predicted', 'True'], [NEW_PRED, TRUE_C], color=['skyblue', 'lightgreen'])
plt.title("Comparison of Predicted vs True Hypotenuse")
plt.ylabel("Length")
plt.show()
